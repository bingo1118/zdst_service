<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:javaee="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" version="2.4">
   <display-name>fireSystem</display-name>
   
   <!-- web容器的配置信息 -->
   <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
			classpath:/applicationContext.xml
		</param-value>
  </context-param>
  
   <welcome-file-list>
	    <welcome-file>index.html</welcome-file>
	    <welcome-file>index.htm</welcome-file>
	    <welcome-file>index.jsp</welcome-file>
	    <welcome-file>default.html</welcome-file>
	    <welcome-file>default.htm</welcome-file>
	    <welcome-file>default.jsp</welcome-file>
   </welcome-file-list>
  
    <listener>
   		<listener-class>com.cloudfire.server.InitListener</listener-class>
   </listener>

   <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--此监听器主要用于解决java.beans.Introspector导致的内存泄漏的问题，应该在所有过滤器之前  -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  
  <!--springmvc前端控制器 -->
  <servlet>
  	<servlet-name>springmvc</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
  	如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml）
  	 -->
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath:springmvc.xml</param-value>
  	</init-param>
  </servlet>
  
  <!-- 文件上传的Servlet-->
  <servlet>
    <description>This is the description of my J2EE component</description>
    <display-name>This is the display name of my J2EE component</display-name>
    <servlet-name>uploadFile</servlet-name>
    <servlet-class>com.cloudfire.servlet.uploadFile</servlet-class>
  </servlet>

 

  
  <servlet-mapping>
  	<servlet-name>springmvc</servlet-name>
  	<!-- 
  	第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
  	第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
  	使用此种方式可以实现 RESTful风格的url
  	第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
  	仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。
  	 -->
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
 <!--   <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping> -->
  
  <servlet-mapping>
    <servlet-name>uploadFile</servlet-name>
    <url-pattern>/servlet/uploadFile</url-pattern>
  </servlet-mapping>
  
  
  <servlet>  
  
       <servlet-name>dwr-invoker</servlet-name>  
  
       <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>  
  
       <!-- 设置为调试模式 -->  
  
       <init-param>  
  
           <param-name>debug</param-name>  
  
           <param-value>true</param-value>  
  
       </init-param>  
       <init-param>
            <param-name>allowScriptTagRemoting</param-name>
            <param-value>true</param-value>
       </init-param>
       <init-param>
            <param-name>activeReverseAjaxEnabled</param-name>
            <param-value>true</param-value>
       </init-param>
        <init-param>
            <param-name>initApplicationScopeCreatorsAtStartup</param-name>
            <param-value>true</param-value>
       </init-param>
       <init-param>
            <param-name>org.directwebremoting.extend.ScriptSessionManager</param-name>
            <param-value>com.cloudfire.dwr.push.ScriptSessionManager</param-value>
       </init-param>
    </servlet>  
  
    <servlet-mapping>  
  
       <servlet-name>dwr-invoker</servlet-name>  
  
       <url-pattern>/dwr/*</url-pattern>  
  
</servlet-mapping>  
  
<!-- 会话配置，失效时间5min -->  
  <session-config>
    <session-timeout>300000</session-timeout>
  </session-config>
  
<!-- 	<filter>
		<filter-name>charsetFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
		</init-param>
	</filter>
	-->
	   <!-- 字符编码过滤器设置一次就行，不需要重复设置 edit by yfs @ 16:47 2017/11/3 -->
	   
	   
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
   <filter> 
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
   
   <!-- SiteMesh是一个网页布局和修饰的框架 -->
  <filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
  </filter>
  
  <!-- 过滤器执行的顺序是根据filter-mapping的顺序来的 -->
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> 
  

</web-app>